---
import '../styles/global.css'

// fonts
import geistMonoLatin400 from '@fontsource/geist-mono/files/geist-mono-latin-400-normal.woff2'
import geistMonoLatin600 from '@fontsource/geist-mono/files/geist-mono-latin-600-normal.woff2'
import '@fontsource/geist-mono/latin-400.css'
import '@fontsource/geist-mono/latin-600.css'
import geistLatin400 from '@fontsource/geist-sans/files/geist-sans-latin-400-normal.woff2'
import geistLatin600 from '@fontsource/geist-sans/files/geist-sans-latin-600-normal.woff2'
import '@fontsource/geist-sans/latin-400.css'
import '@fontsource/geist-sans/latin-600.css'
import loraLatinItalic400 from '@fontsource/lora/files/lora-latin-400-italic.woff2'
import loraLatin400 from '@fontsource/lora/files/lora-latin-400-normal.woff2'
import loraLatin600 from '@fontsource/lora/files/lora-latin-600-normal.woff2'
import '@fontsource/lora/latin-400-italic.css'
import '@fontsource/lora/latin-400.css'
import '@fontsource/lora/latin-600.css'

interface Props {
	title: string
	description: string
	image?: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<link rel="icon" type="image/svg+xml" href="/favicon.ico" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/site.webmanifest" />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<link
	rel="alternate"
	type="application/rss+xml"
	title="Bhargawanan Bhuyan's Portfolio"
	href={new URL('rss.xml', Astro.url.origin)}
/>
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- PageFind -->
<link href="/pagefind/pagefind-ui.css" rel="stylesheet" />
<script is:inline src="/pagefind/pagefind-ui.js"></script>

<link rel="preload" href={geistLatin400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={geistLatin600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={loraLatin400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={loraLatinItalic400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={loraLatin600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={geistMonoLatin400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={geistMonoLatin600} as="font" type="font/woff2" crossorigin />

<script is:inline lang="ts">
	function init() {
		preloadTheme()
		const backToPrev = document.getElementById('back-to-prev')
		backToPrev?.addEventListener('click', () => window.history.back())

		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (event) => {
			if (localStorage.theme === 'system') {
				toggleTheme(event.matches)
			}
		})
	}

	function toggleTheme(dark) {
		const css = document.createElement('style')

		css.appendChild(
			document.createTextNode(
				`* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `
			)
		)

		document.head.appendChild(css)

		if (dark) {
			document.documentElement.classList.add('dark')
		} else {
			document.documentElement.classList.remove('dark')
		}

		window.getComputedStyle(css).opacity
		document.head.removeChild(css)
	}

	function toggleMetaTheme() {
		let metaTheme = document.querySelector('meta[name="theme-color"]')
		let metaColorSchema = document.querySelector('meta[name="color-scheme"]')
		if (!metaTheme) {
			metaTheme = document.createElement('meta')
			metaTheme.setAttribute('name', 'theme-color')
			metaColorSchema = document.createElement('meta')
			metaColorSchema.setAttribute('name', 'color-scheme')
			document.head.appendChild(metaTheme)
			document.head.appendChild(metaColorSchema)
		}
		const dark = document.documentElement.classList.contains('dark')
		if (dark) {
			metaTheme?.setAttribute('content', '#171717')
			metaColorSchema?.setAttribute('content', 'dark')
		} else {
			metaTheme?.setAttribute('content', '#f5f5f5')
			metaColorSchema?.setAttribute('content', 'light')
		}
	}

	function preloadTheme() {
		const userTheme = localStorage.theme

		if (userTheme === 'light' || userTheme === 'dark') {
			toggleTheme(userTheme === 'dark')
		} else {
			toggleTheme(window.matchMedia('(prefers-color-scheme: dark)').matches)
		}

		toggleMetaTheme()
	}

	document.addEventListener('DOMContentLoaded', () => init())
	document.addEventListener('astro:after-swap', () => init())
	preloadTheme()
</script>
